<?php

/*
 +------------------------------------------------------------------------+
 | Phalcon Framework                                                      |
 +------------------------------------------------------------------------+
 | Copyright (c) 2011-2017 Phalcon Team (https:phalcon.io)          |
 +------------------------------------------------------------------------+
 | This source file is subject to the New BSD License that is bundled     |
 | with this package in the file LICENSE.txt.                             |
 |                                                                        |
 | If you did not receive a copy of the license and are unable to         |
 | obtain it through the world-wide-web, please send an email             |
 | to license@phalcon.io so we can send you a copy immediately.       |
 +------------------------------------------------------------------------+
 */

namespace Phalcon\Tests\Unit\Di;

use Phalcon\Di\Di;
use Phalcon\Di\DiInterface;
use Phalcon\Di\Exception;
use Phalcon\Html\Escaper;
use Phalcon\Tests\Fixtures\Di\SimpleComponent;
use Phalcon\Tests\Fixtures\Di\SomeComponent;
use Phalcon\Tests\Fixtures\Di\SomeServiceProvider;
use stdClass;

use function dataDir;
use function is_string;

/**
 * Tests the \Phalcon\Di component
 */
class DiTest extends AbstractUnitTestCase
{
    /**
     * @var DiInterface
     */
    protected $phDi;

    /**
     * executed before each test
     */
    public function setUp(): void
    {
        Di::reset();

        $this->phDi = new Di();
    }

    /**
     * Tests registering a service in the services container via Di::attempt
     *
     * @author Phalcon Team <team@phalcon.io>
     * @since  2020-09-09
     */
    public function testAttempt(): void
    {
        $this->phDi->set(
            'escape4',
            function () {
                return new Escaper();
            }
        );

        $this->phDi->attempt(
            'escape4',
            function () {
                return new stdClass();
            }
        );

        $this->phDi->attempt(
            'escape5',
            function () {
                return new stdClass();
            }
        );

        $class  = Escaper::class;
        $actual = $this->phDi->get('escape4');
        $this->assertInstanceOf($class, $actual);

        $class  = stdClass::class;
        $actual = $this->phDi->get('escape4');
        $this->assertInstanceOf($class, $actual);
    }

    /**
     * Tests resolving service via magic __get
     *
     * @author Phalcon Team <team@phalcon.io>
     * @since  2020-09-09
     */
    public function testMagicGetCall(): void
    {
        $this->phDi->set(
            'escape8',
            Escaper::class
        );

        $this->assertInstanceOf(
            Escaper::class,
            $this->phDi->getEscaper8()
        );
    }

    /**
     * Tests registering a service via magic __set
     *
     * @author Phalcon Team <team@phalcon.io>
     * @since  2020-09-09
     */
    public function testMagicSetCall(): void
    {
        $this->phDi->setEscaper9(
            Escaper::class
        );

        $this->assertInstanceOf(
            Escaper::class,
            $this->phDi->get('escape9')
        );
    }

    /**
     * Tests registering a service with parameters
     *
     * @author Phalcon Team <team@phalcon.io>
     * @since  2020-09-09
     */
    public function testSetParameters(): void
    {
        $this->phDi->set(
            'someComponent1',
            function ($v) {
                return new SomeComponent($v);
            }
        );

        $this->phDi->set(
            'someComponent2',
            SomeComponent::class
        );


        $someComponent1 = $this->phDi->get(
            'someComponent1',
            [
                100,
            ]
        );

        $this->assertSame(
            100,
            $someComponent1->someProperty
        );


        $someComponent2 = $this->phDi->get(
            'someComponent2',
            [
                500,
            ]
        );

        $this->assertSame(
            500,
            $someComponent2->someProperty
        );
    }

    /**
     * Tests getting raw services
     *
     * @author Phalcon Team <team@phalcon.io>
     * @since  2020-09-09
     */
    public function testGetRawService(): void
    {
        $this->phDi->set('service1', 'some-service');

        $this->assertSame(
            'some-service',
            $this->phDi->getRaw('service1')
        );
    }

    /**
     * Tests registering a services via array access
     *
     * @author Phalcon Team <team@phalcon.io>
     * @since  2020-09-09
     */
    public function testRegisteringViaArrayAccess(): void
    {
        $this->phDi['simple'] = SimpleComponent::class;

        $this->assertInstanceOf(
            SimpleComponent::class,
            $this->phDi->get('simple')
        );
    }

    /**
     * Tests resolving a services via array access
     *
     * @author Phalcon Team <team@phalcon.io>
     * @since  2020-09-09
     */
    public function testComplexInjection(): void
    {
        $response = new Response();

        $this->phDi->set('response', $response);

         Injection of parameters in the constructor
        $this->phDi->set(
            'simpleConstructor',
            [
                'className' => InjectableComponent::class,
                'arguments' => [
                    [
                        'type'  => 'parameter',
                        'value' => 'response',
                    ],
                ],
            ]
        );

         Injection of simple setters
        $this->phDi->set(
            'simpleSetters',
            [
                'className' => InjectableComponent::class,
                'calls'     => [
                    [
                        'method'    => 'setResponse',
                        'arguments' => [
                            [
                                'type'  => 'parameter',
                                'value' => 'response',
                            ],
                        ],
                    ],
                ],
            ]
        );

         Injection of properties
        $this->phDi->set(
            'simpleProperties',
            [
                'className'  => InjectableComponent::class,
                'properties' => [
                    [
                        'name'  => 'response',
                        'value' => [
                            'type'  => 'parameter',
                            'value' => 'response',
                        ],
                    ],
                ],
            ]
        );

         Injection of parameters in the constructor resolving the service parameter
        $this->phDi->set(
            'complexConstructor',
            [
                'className' => InjectableComponent::class,
                'arguments' => [
                    [
                        'type' => 'service',
                        'name' => 'response',
                    ],
                ],
            ]
        );

         Injection of simple setters resolving the service parameter
        $this->phDi->set(
            'complexSetters',
            [
                'className' => InjectableComponent::class,
                'calls'     => [
                    [
                        'method'    => 'setResponse',
                        'arguments' => [
                            [
                                'type' => 'service',
                                'name' => 'response',
                            ],
                        ],
                    ],
                ],
            ]
        );

         Injection of properties resolving the service parameter
        $this->phDi->set(
            'complexProperties',
            [
                'className'  => InjectableComponent::class,
                'properties' => [
                    [
                        'name'  => 'response',
                        'value' => [
                            'type' => 'service',
                            'name' => 'response',
                        ],
                    ],
                ],
            ]
        );


        $component = $this->phDi->get('simpleConstructor');

        $this->assertTrue(is_string($component->getResponse()));

        $this->assertSame(
            'response',
            $component->getResponse()
        );


        $component = $this->phDi->get('simpleSetters');

        $this->assertTrue(is_string($component->getResponse()));

        $this->assertSame(
            'response',
            $component->getResponse()
        );


        $component = $this->phDi->get('simpleProperties');

        $this->assertTrue(is_string($component->getResponse()));
        $this->assertSame('response', $component->getResponse());


        $component = $this->phDi->get('complexConstructor');

        $this->assertTrue(is_object($component->getResponse()));
        $this->assertSame($response, $component->getResponse());


        $component = $this->phDi->get('complexSetters');

        $this->assertTrue(is_object($component->getResponse()));
        $this->assertSame($response, $component->getResponse());


        $component = $this->phDi->get('complexProperties');

        $this->assertTrue(is_object($component->getResponse()));
        $this->assertSame($response, $component->getResponse());
    }

    /**
     * Register services using provider.
     *
     * @author Caio Almeida <caio.f.r.amd@gmail.com>
     * @since  2017-04-11
     */
    public function testRegistersServiceProvider(): void
    {
        $this->phDi->register(new SomeServiceProvider());

        $this->assertSame(
            'bar',
            $this->phDi['foo']
        );


        $service = $this->phDi->get('fooAction');

        $this->assertInstanceOf(
            SomeComponent::class,
            $service
        );
    }

    /**
     * Tests loading services from yaml files.
     *
     * @author Gorka Guridi <gorka.guridi@gmail.com>
     * @since  2017-04-12
     */
    public function testYamlLoader(): void
    {
        $this->checkExtensionIsLoaded('yaml');

        $this->phDi->loadFromYaml(
            dataDir('fixtures/Di/services.yml')
        );

        $this->assertTrue(
            $this->phDi->has('unit-test')
        );

        $this->assertFalse(
            $this->phDi->getService('unit-test')->isShared()
        );

        $this->assertTrue(
            $this->phDi->has('config')
        );

        $this->assertTrue(
            $this->phDi->getService('config')->isShared()
        );

        $this->assertTrue(
            $this->phDi->has('component')
        );

        $this->assertFalse(
            $this->phDi->getService('component')->isShared()
        );

        $this->assertInstanceOf(
            Config::class,
            $this->phDi->get('component')->someProperty
        );
    }

    /**
     * Tests loading services from php files.
     *
     * @author Gorka Guridi <gorka.guridi@gmail.com>
     * @since  2017-04-12
     */
    public function testPhpLoader(): void
    {
        $this->phDi->loadFromPhp(
            dataDir('fixtures/Di/services.php')
        );

        $this->assertTrue(
            $this->phDi->has('unit-test')
        );

        $this->assertFalse(
            $this->phDi->getService('unit-test')->isShared()
        );

        $this->assertTrue(
            $this->phDi->has('config')
        );

        $this->assertTrue(
            $this->phDi->getService('config')->isShared()
        );

        $this->assertTrue(
            $this->phDi->has('component')
        );

        $this->assertFalse(
            $this->phDi->getService('component')->isShared()
        );

        $this->assertInstanceOf(
            Config::class,
            $this->phDi->get('component')->someProperty
        );
    }

    /**
     * Tests resolving service
     *
     * @return void
     *
     * @author Phalcon Team <team@phalcon.io>
     * @since  2020-09-09
     */
    public function testResolvingService(): void
    {
        $container = new Di();

        $container->set(
            'resolved',
            function () {
                return new Escaper();
            }
        );

        $container->set(
            'notResolved',
            function () {
                return new Escaper();
            }
        );

        $actual = $container->getService('resolved')->isResolved();
        $this->assertFalse($actual);

        $actual = $container->getService('notResolved')->isResolved();
        $this->assertFalse($actual);


        $container->get('resolved');

        $actual = $container->getService('resolved')->isResolved();
        $this->assertTrue($actual);

        $actual = $container->getService('notResolved')->isResolved();
        $this->assertFalse($actual);
    }

}
