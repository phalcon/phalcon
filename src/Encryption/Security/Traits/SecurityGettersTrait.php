<?php

/**
 * This file is part of the Phalcon Framework.
 *
 * (c) Phalcon Team <team@phalcon.io>
 *
 * For the full copyright and license information, please view the LICENSE.txt
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace Phalcon\Encryption\Security\Traits;

use Phalcon\Http\RequestInterface;
use Phalcon\Encryption\Security;
use Phalcon\Encryption\Security\Exception;
use Phalcon\Encryption\Security\Random;
use Phalcon\Session\ManagerInterface as SessionInterface;

use function mb_strlen;

/**
 * Trait SecurityGettersTrait
 *
 * @package Phalcon\Encryption\Security\Traits
 *
 * @property int                   $defaultHash
 * @property int                   $numberBytes
 * @property Random                $random
 * @property string|null           $requestToken
 * @property string|null           $token
 * @property string|null           $tokenKey
 * @property string                $tokenKeySessionId
 * @property string                $tokenValueSessionId
 * @property int                   $workFactor
 * @property RequestInterface|null $localRequest
 * @property SessionInterface|null $localSession
 */
trait SecurityGettersTrait
{
    /**
     * @var int
     */
    protected int $defaultHash = Security::CRYPT_DEFAULT;

    /**
     * @var int
     */
    protected int $numberBytes = 16;

    /**
     * @var Random
     */
    protected Random $random;

    /**
     * @var string|null
     */
    protected ?string $requestToken = null;

    /**
     * @var string|null
     */
    protected ?string $token = null;

    /**
     * @var string|null
     */
    protected ?string $tokenKey = null;

    /**
     * @var string
     */
    protected string $tokenKeySessionId = '$PHALCON/CSRF/KEY$';

    /**
     * @var string
     */
    protected string $tokenValueSessionId = '$PHALCON/CSRF$';

    /**
     * @var int
     */
    protected int $workFactor = 10;

    /**
     * @var RequestInterface|null
     */
    private ?RequestInterface $localRequest = null;

    /**
     * @var SessionInterface|null
     */
    private ?SessionInterface $localSession = null;

    /**
     * Returns the default hash
     *
     * @return int
     */
    public function getDefaultHash(): int
    {
        return $this->defaultHash;
    }

    /**
     * Returns a secure random number generator instance
     *
     * @return Random
     */
    public function getRandom(): Random
    {
        return $this->random;
    }

    /**
     * Returns a number of bytes to be generated by the openssl pseudo random
     * generator
     *
     * @return int
     */
    public function getRandomBytes(): int
    {
        return $this->numberBytes;
    }

    /**
     * Returns the value of the CSRF token for the current request.
     *
     * @return string|null
     */
    public function getRequestToken(): ?string
    {
        if (true === empty($this->requestToken)) {
            return $this->getSessionToken();
        }

        return $this->requestToken;
    }

    /**
     * Returns the value of the CSRF token in session
     *
     * @return string|null
     */
    public function getSessionToken(): ?string
    {
        /** @var SessionInterface|null $session */
        $session = $this->getLocalService('session', 'localSession');
        if (null !== $session) {
            return $session->get($this->tokenValueSessionId);
        }

        return null;
    }

    /**
     * Generate a >22-length pseudo random string to be used as salt for
     * passwords
     *
     * @param int $numberBytes
     *
     * @return string
     * @throws Exception
     */
    public function getSaltBytes(int $numberBytes = 0): string
    {
        while (true) {
            $safeBytes = $this->random->base64Safe($numberBytes);
            if ($safeBytes && mb_strlen($safeBytes) >= $numberBytes) {
                break;
            }
        }

        return $safeBytes;
    }

    /**
     * Generates a pseudo random token value to be used as input's value in a
     * CSRF check
     *
     * @return string
     * @throws Exception
     */
    public function getToken(): string
    {
        if (null === $this->token) {
            $this->requestToken = $this->getSessionToken();
            $this->token        = $this->random->base64Safe($this->numberBytes);

            /** @var SessionInterface|null $session */
            $session = $this->getLocalService('session', 'localSession');
            if (null !== $session) {
                $session->set(
                    $this->tokenValueSessionId,
                    $this->token
                );
            }
        }

        return $this->token;
    }

    /**
     * Generates a pseudo random token key to be used as input's name in a CSRF
     * check
     *
     * @return string|null
     * @throws Exception
     */
    public function getTokenKey(): ?string
    {
        if (null === $this->tokenKey) {
            /** @var SessionInterface|null $session */
            $session = $this->getLocalService('session', 'localSession');
            if (null !== $session) {
                $this->tokenKey = $this->random->base64Safe($this->numberBytes);
                $session->set(
                    $this->tokenKeySessionId,
                    $this->tokenKey
                );
            }
        }

        return $this->tokenKey;
    }

    /**
     * @return int
     */
    public function getWorkFactor(): int
    {
        return $this->workFactor;
    }

    /**
     * @param string $name
     * @param string $property
     *
     * @return RequestInterface|SessionInterface|null
     */
    abstract protected function getLocalService(string $name, string $property);
}
