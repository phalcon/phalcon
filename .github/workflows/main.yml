# This file is part of Phalcon.
#
# (c) Phalcon Team <team@phalcon.io>
#
# For the full copyright and license information, please view
# the LICENSE file that was distributed with this source code.

name: Phalcon CI

on:
  schedule:
    - cron: '0 2 * * *' # Daily at 02:00 runs only on default branch
  push:
    paths-ignore:
      - '**.md'
      - '**.txt'
  pull_request:
  workflow_dispatch:

env:
  # All versions should be declared here
  PHALCON_VERSION: 6.0.0
  CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}

  # For tests
  LANG: en_US.UTF-8
  LANGUAGE: en_US.UTF-8
  LC_ALL: en_US.UTF-8

  # Windows specific
  TOOLS_DIR: 'C:\tools'

  # PHP extensions required by Composer
  EXTENSIONS: apcu, gettext, gd, igbinary, imagick, intl, json, mbstring, msgpack, memcached, sqlite3, yaml, redis, :memcache

permissions: {}
jobs:
  # PHP CodeSniffer inspection
  phpcs:
    permissions:
      contents: read

    name: Validate Tests code style
    if: "!contains(github.event.head_commit.message, 'ci skip')"

    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.0
          extensions: ${{ env.EXTENSIONS }}
          ini-values: apc.enable_cli=on, session.save_path=/tmp
          tools: pecl
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: PHPCS
        run: |
          composer install --prefer-dist
          vendor/bin/phpcs --standard=./phpcs.xml

  build-and-test:
    permissions:
      contents: read # to fetch code (actions/checkout)

    name: tests / PHP-${{ matrix.php }}-${{ matrix.ts }}-${{ matrix.name }}-${{ matrix.arch }}

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        php: [ '8.0', '8.1' ]
        ts: [ 'nts', 'ts' ]
        arch: [ 'x64' ]

        name:
          - ubuntu-gcc
          - macos-clang

        # matrix names should be in next format:
        #     {php}-{ts}-{os.name}-{compiler}-{arch}
        include:
          # Linux
          - { name: ubuntu-gcc, os: ubuntu-20.04, compiler: gcc }
          # macOS
          - { name: macos-clang, os: macos-11, compiler: clang }
          # Windows
          - { php: '8.0', ts: 'ts',  arch: 'x64', name: 'windows2019-vs16', os: 'windows-2019', compiler: 'vs16' }
          - { php: '8.0', ts: 'nts', arch: 'x64', name: 'windows2019-vs16', os: 'windows-2019', compiler: 'vs16' }
          - { php: '8.1', ts: 'ts',  arch: 'x64', name: 'windows2019-vs16', os: 'windows-2019', compiler: 'vs16' }
          - { php: '8.1', ts: 'nts', arch: 'x64', name: 'windows2019-vs16', os: 'windows-2019', compiler: 'vs16' }

    steps:
      - uses: actions/checkout@v3

      - name: Setup platform specific environment
        shell: pwsh
        run: |
          git config --global core.autocrlf false
          $SessionSavePath = if ("${{ runner.os }}" -eq "Windows") { 'C:\temp' } else { '/tmp' }
          Write-Output "SESSION_SAVE_PATH=$SessionSavePath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.EXTENSIONS }}
          ini-values: apc.enable_cli=on, session.save_path=${{ env.SESSION_SAVE_PATH }}
          tools: pecl, phpize, php-config, composer:v2
          coverage: xdebug
        env:
          PHPTS: ${{ matrix.ts }}
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate composer
        run: composer validate --no-check-all --no-check-publish

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Setup Composer Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ matrix.php }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-${{ matrix.php }}-

      - run: composer install --prefer-dist

      - name: Setup Tests
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Linux" ]; then
            ./config/ci/linux-setup-locales.sh
          fi

          cp tests/_config/.env.default .env
          vendor/bin/codecept build
#          php tests/_config/generate-db-schemas.php

      - name: Run Unit Tests
        if: always()
        run: vendor/bin/codecept run --coverage-xml=coverage-${{ matrix.php }}.xml --ext DotReporter unit

  testing-suites:
    permissions:
      contents: read # to fetch code (actions/checkout)
    runs-on: ubuntu-20.04

    services:
      mysql:
        image: mysql:5.7
        ports:
          - "3306:3306"
        env:
          MYSQL_ROOT_PASSWORD: secret
          MYSQL_USER: phalcon
          MYSQL_DATABASE: phalcon
          MYSQL_PASSWORD: secret
      postgres:
        image: postgres:12-alpine
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: phalcon
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: phalcon
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:5-alpine
        ports:
          - "6379:6379"
      memcached:
        image: memcached:1.5-alpine
        ports:
          - "11211:11211"

    strategy:
      fail-fast: false
      matrix:
        php: [ '8.0', '8.1' ]

    steps:
      - uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.EXTENSIONS }}
          ini-values: apc.enable_cli=on, session.save_path=/tmp
          tools: pecl
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare test Environment
        run: |
          echo "::group::Set up locales"
          ./config/ci/linux-setup-locales.sh
          echo "::endgroup::"

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Setup Composer Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-php${{ matrix.php }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-php${{ matrix.php }}-

      - run: composer install --prefer-dist

      - name: Setup Tests
        run: |
          cp tests/_config/.env.default .env
          vendor/bin/codecept build
#          php tests/_config/generate-db-schemas.php

      - name: Run Unit Tests
        run: |
          vendor/bin/codecept run --coverage-xml=unit.xml --ext DotReporter unit

#      - name: Run CLI Tests
#        if: always()
#        run: vendor/bin/codecept run --coverage-xml=coverage-${{ matrix.php }}.xml --ext DotReporter cli
#
      - name: Run Integration Tests
        env:
          DATA_REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
          DATA_MEMCACHED_PORT: ${{ job.services.memcached.ports['11211'] }}
        run: |
          vendor/bin/codecept run --coverage-xml=integration.xml --ext DotReporter integration

      - name: Run Database Tests (Common)
#        env:
#          DATA_REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
#          DATA_MEMCACHED_PORT: ${{ job.services.memcached.ports['11211'] }}
#          DATA_MYSQL_USER: root
        if: always()
        run: vendor/bin/codecept run --coverage-xml=db-common-${{ matrix.php }}.xml --ext DotReporter database -g common

      - name: Run Database Tests (MySQL)
        env:
          DATA_MYSQL_PORT: ${{ job.services.mysql.ports['3306'] }}
          DATA_MYSQL_USER: root
#          DATA_REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
#          DATA_MEMCACHED_PORT: ${{ job.services.memcached.ports['11211'] }}
        if: always()
        run: vendor/bin/codecept run --coverage-xml=db-mysql-${{ matrix.php }}.xml --ext DotReporter database --env mysql -g mysql

      - name: Run Database Tests (Sqlite)
#        env:
#          DATA_REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
#          DATA_MEMCACHED_PORT: ${{ job.services.memcached.ports['11211'] }}
        if: always()
        run: vendor/bin/codecept run --coverage-xml=db-sqlite-${{ matrix.php }}.xml --ext DotReporter database --env sqlite -g sqlite

      - name: Run Database Tests (Postgres)
        env:
          DATA_POSTGRES_USER: postgres
          DATA_POSTGRES_PORT: ${{ job.services.postgres.ports['5432'] }}
#          DATA_REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
#          DATA_MEMCACHED_PORT: ${{ job.services.memcached.ports['11211'] }}
        if: always()
        run: vendor/bin/codecept run --coverage-xml=db-postgres-${{ matrix.php }}.xml --ext DotReporter database --env pgsql -g pgsql

      # - name: Run Database Tests (SQL Server)
      #   env:
      #     DATA_REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
      #     DATA_MEMCACHED_PORT: ${{ job.services.memcached.ports['11211'] }}
      #   run: vendor/bin/codecept run --ext DotReporter database --env sqlsrv
